{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"example","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP+xJ68zr2HWvQeyVm+pKKB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jsETMVCuAea8","executionInfo":{"status":"ok","timestamp":1636554958156,"user_tz":-480,"elapsed":430,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"a9e643ea-c9e2-4c90-aec8-0184b56a704e"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KtoPDsIkYFfe","executionInfo":{"status":"ok","timestamp":1636556707997,"user_tz":-480,"elapsed":6604,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"51635d3c-cfbd-4b61-cbaa-0567e3a52bd3"},"source":["!pip install -U scikit-learn\n","!pip install xgboost"],"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (1.0.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (3.0.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.1.0)\n","Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.19.5)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.4.1)\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.7/dist-packages (0.90)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.4.1)\n"]}]},{"cell_type":"code","metadata":{"id":"i9ohiYC8Aqtz","executionInfo":{"status":"ok","timestamp":1636556649608,"user_tz":-480,"elapsed":505,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}}},"source":["DIR = '/content/gdrive/My Drive/iss/covid/data/'\n","\n","import pickle \n","import pandas as pd \n","import numpy as np\n","\n","import sklearn.metrics as metrics\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.callbacks import ModelCheckpoint,CSVLogger\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import Activation\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras import optimizers\n","from tensorflow.keras import regularizers\n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","import lightgbm as lgb\n","from sklearn.linear_model import LogisticRegression\n","from xgboost import XGBClassifier\n","from sklearn.ensemble import VotingClassifier\n","from sklearn.naive_bayes import MultinomialNB\n"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"gcr1-WV2AqwL","executionInfo":{"status":"ok","timestamp":1636554972051,"user_tz":-480,"elapsed":302,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}}},"source":["# X_train = pickle.load(open(DIR+\"X_train_probaML_random21.sav\", 'rb'))\n","# X_test = pickle.load(open(DIR+\"X_test_probaML_random21.sav\", 'rb'))\n","# y_train = pickle.load(open(DIR+\"y_train_probaML_random21.sav\", 'rb'))\n","# y_test = pickle.load(open(DIR+\"y_test_probaML_random21.sav\", 'rb'))\n","# print(X_train.shape)\n","# print(y_train.shape)\n","# print(X_test.shape)\n","# print(y_test.shape)\n","\n","# X_train_left = X_train[:,:60]\n","# X_train_right = X_train[:,60:]\n","\n","# print(X_train_left.shape)\n","# print(X_train_right.shape)\n","\n","\n","# X_test_left = X_test[:,:60]\n","# X_test_right = X_test[:,60:]\n","\n","# print(X_test_left.shape)\n","# print(X_test_right.shape)"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FbfCgIg9Aq4E","executionInfo":{"status":"ok","timestamp":1636556915634,"user_tz":-480,"elapsed":302,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"aff1abd4-c594-4b52-b1e8-fa99c738fcab"},"source":["# xgb_m = pickle.load(open(DIR+\"xgb_model_1024.sav\", 'rb'))\n","rfc_m = pickle.load(open(DIR+\"rfc_model_1024.sav\", 'rb'))\n","lr_m = pickle.load(open(DIR+\"lr_model_1024.sav\", 'rb'))\n","lgb_m = pickle.load(open(DIR+\"lgb_model_1024.sav\", 'rb'))\n","\n","sc = pickle.load(open(DIR+\"sc.sav\", 'rb'))\n","ohe = pickle.load(open(DIR+\"ohe.sav\", 'rb'))\n","imputer = pickle.load(open(DIR+\"imputer.sav\", 'rb'))\n","imputer_cat = pickle.load(open(DIR+\"imputer_cat.sav\", 'rb'))\n","\n","final_feature_col = pickle.load(open(DIR+\"final_feature_col.sav\", 'rb'))\n","SYMP_COLS = pickle.load(open(DIR+\"SYMP_COLS.sav\", 'rb'))\n"],"execution_count":37,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator DecisionTreeClassifier from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator RandomForestClassifier from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator StandardScaler from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator OneHotEncoder from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 0.23.2 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n"]}]},{"cell_type":"code","metadata":{"id":"YprL9UVBAq9Y","executionInfo":{"status":"ok","timestamp":1636555600898,"user_tz":-480,"elapsed":407,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}}},"source":["num_col = ['AGE_YRS', 'NUMDAYS']\n","bool_col = ['L_THREAT', 'DISABLE', 'BIRTH_DEFECT','OFC_VISIT']\n","cat_col = ['SEX', 'VAX_MANU', 'VAX_DOSE_SERIES']\n","symp_col = ['SYMPTOMSdyspnoea',\n"," 'SYMPTOMSpyrexia',\n"," 'SYMPTOMSchest pain',\n"," 'SYMPTOMSheadache',\n"," 'SYMPTOMSfatigue',\n"," 'SYMPTOMScovid-19',\n"," 'SYMPTOMSblood test',\n"," 'SYMPTOMSnausea',\n"," 'SYMPTOMSasthenia',\n"," 'SYMPTOMScomputerised tomogram',\n"," 'SYMPTOMSpain',\n"," 'SYMPTOMSdizziness',\n"," 'SYMPTOMSsars-cov-2 test positive',\n"," 'SYMPTOMSvomiting',\n"," 'SYMPTOMSchills',\n"," 'SYMPTOMScerebrovascular accident',\n"," 'SYMPTOMSpulmonary embolism',\n"," 'SYMPTOMSelectrocardiogram',\n"," 'SYMPTOMSechocardiogram',\n"," 'SYMPTOMSpain in extremity',\n"," 'SYMPTOMStroponin increased',\n"," 'SYMPTOMSinjection site pain',\n"," 'SYMPTOMSarthralgia',\n"," 'SYMPTOMSmyalgia',\n"," 'SYMPTOMSinjection site erythema',\n"," 'SYMPTOMSrash',\n"," 'SYMPTOMSpruritus',\n"," 'SYMPTOMSinjection site swelling',\n"," 'SYMPTOMSerythema',\n"," 'SYMPTOMSinjection site pruritus',\n"," 'SYMPTOMShyperhidrosis',\n"," 'SYMPTOMSparaesthesia',\n"," 'SYMPTOMSurticaria',\n"," 'SYMPTOMSdiarrhoea',\n"," 'SYMPTOMShypoaesthesia',\n"," 'SYMPTOMSinjection site warmth',\n"," 'SYMPTOMSmalaise',\n"," 'SYMPTOMSlymphadenopathy',\n"," 'SYMPTOMSfeeling abnormal',\n"," 'SYMPTOMSperipheral swelling',\n"," 'SYMPTOMSsyncope']"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"iY7nu-WTIKxP","executionInfo":{"status":"ok","timestamp":1636557916135,"user_tz":-480,"elapsed":534,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"08a116a5-be8f-4769-de9d-bec9c509aafc"},"source":["## EXAMPLE OF A RAW DATA TO BE PREDICTED \n","\n","vaers = pd.read_csv(DIR + \"41SYMP+VAERS.csv\",index_col=0,nrows=1)\n","vaers.drop(symp_col,axis=1,inplace=True)\n","vaers['symptoms'] = [['SYMPTOMSblood test', 'SYMPTOMSfatigue', 'SYMPTOMSvomiting', 'SYMPTOMSdizziness']]\n","display(vaers)"],"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SEX</th>\n","      <th>BIRTH_DEFECT</th>\n","      <th>VAX_MANU</th>\n","      <th>VAX_DOSE_SERIES</th>\n","      <th>DIED</th>\n","      <th>L_THREAT</th>\n","      <th>HOSPITAL</th>\n","      <th>DISABLE</th>\n","      <th>RECOVD</th>\n","      <th>OFC_VISIT</th>\n","      <th>ER</th>\n","      <th>AGE_YRS</th>\n","      <th>HOSPDAYS</th>\n","      <th>NUMDAYS</th>\n","      <th>symptoms</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>MODERNA</td>\n","      <td>UNK</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>47.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>[SYMPTOMSblood test, SYMPTOMSfatigue, SYMPTOMS...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  SEX  BIRTH_DEFECT  ... NUMDAYS                                           symptoms\n","0   F             0  ...     4.0  [SYMPTOMSblood test, SYMPTOMSfatigue, SYMPTOMS...\n","\n","[1 rows x 15 columns]"]},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"O7GpElWLcFku","executionInfo":{"status":"ok","timestamp":1636557917652,"user_tz":-480,"elapsed":1,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}}},"source":["symptoms = vaers.loc[0,'symptoms']"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":135},"id":"zzTROOvyb5hy","executionInfo":{"status":"ok","timestamp":1636557930881,"user_tz":-480,"elapsed":309,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"a90a27a6-4c3e-4500-b98c-5fb0aa1d082e"},"source":["## changing symptoms to features\n","\n","for c in symp_col: \n","  vaers[c] = 1 if i in symptoms else 0\n","\n","vaers.drop(['symptoms'],axis=1,inplace=True)\n","display(vaers)"],"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SEX</th>\n","      <th>BIRTH_DEFECT</th>\n","      <th>VAX_MANU</th>\n","      <th>VAX_DOSE_SERIES</th>\n","      <th>DIED</th>\n","      <th>L_THREAT</th>\n","      <th>HOSPITAL</th>\n","      <th>DISABLE</th>\n","      <th>RECOVD</th>\n","      <th>OFC_VISIT</th>\n","      <th>ER</th>\n","      <th>AGE_YRS</th>\n","      <th>HOSPDAYS</th>\n","      <th>NUMDAYS</th>\n","      <th>SYMPTOMSdyspnoea</th>\n","      <th>SYMPTOMSpyrexia</th>\n","      <th>SYMPTOMSchest pain</th>\n","      <th>SYMPTOMSheadache</th>\n","      <th>SYMPTOMSfatigue</th>\n","      <th>SYMPTOMScovid-19</th>\n","      <th>SYMPTOMSblood test</th>\n","      <th>SYMPTOMSnausea</th>\n","      <th>SYMPTOMSasthenia</th>\n","      <th>SYMPTOMScomputerised tomogram</th>\n","      <th>SYMPTOMSpain</th>\n","      <th>SYMPTOMSdizziness</th>\n","      <th>SYMPTOMSsars-cov-2 test positive</th>\n","      <th>SYMPTOMSvomiting</th>\n","      <th>SYMPTOMSchills</th>\n","      <th>SYMPTOMScerebrovascular accident</th>\n","      <th>SYMPTOMSpulmonary embolism</th>\n","      <th>SYMPTOMSelectrocardiogram</th>\n","      <th>SYMPTOMSechocardiogram</th>\n","      <th>SYMPTOMSpain in extremity</th>\n","      <th>SYMPTOMStroponin increased</th>\n","      <th>SYMPTOMSinjection site pain</th>\n","      <th>SYMPTOMSarthralgia</th>\n","      <th>SYMPTOMSmyalgia</th>\n","      <th>SYMPTOMSinjection site erythema</th>\n","      <th>SYMPTOMSrash</th>\n","      <th>SYMPTOMSpruritus</th>\n","      <th>SYMPTOMSinjection site swelling</th>\n","      <th>SYMPTOMSerythema</th>\n","      <th>SYMPTOMSinjection site pruritus</th>\n","      <th>SYMPTOMShyperhidrosis</th>\n","      <th>SYMPTOMSparaesthesia</th>\n","      <th>SYMPTOMSurticaria</th>\n","      <th>SYMPTOMSdiarrhoea</th>\n","      <th>SYMPTOMShypoaesthesia</th>\n","      <th>SYMPTOMSinjection site warmth</th>\n","      <th>SYMPTOMSmalaise</th>\n","      <th>SYMPTOMSlymphadenopathy</th>\n","      <th>SYMPTOMSfeeling abnormal</th>\n","      <th>SYMPTOMSperipheral swelling</th>\n","      <th>SYMPTOMSsyncope</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>MODERNA</td>\n","      <td>UNK</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>47.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  SEX  BIRTH_DEFECT  ... SYMPTOMSperipheral swelling SYMPTOMSsyncope\n","0   F             0  ...                           0               0\n","\n","[1 rows x 55 columns]"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m0jyTQh_ArAN","executionInfo":{"status":"ok","timestamp":1636557942246,"user_tz":-480,"elapsed":455,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"38da345d-21b0-470c-f079-7591c1aa8a16"},"source":["X_bool = vaers[symp_col+bool_col].copy()\n","X_bool_col = symp_col+bool_col\n","X_bool=X_bool.to_numpy()\n","\n","X_cat = vaers[cat_col].copy()\n","X_cat = imputer_cat.transform(X_cat)\n","X_cat = ohe.transform(X_cat)\n","X_cat = X_cat.toarray()\n","feature_col = ohe.get_feature_names()\n","ohe_categories = ohe.categories_\n","\n","X_cat_col = []\n","for i,c in enumerate(cat_col):\n","#     print(i,c)\n","    for j in ohe_categories[i]:\n","        X_cat_col.append(f'{c}__{j}')\n","\n","X_num = imputer.transform(vaers[num_col])\n","X_num = sc.transform(X_num)\n","\n","X_num_col = num_col\n","\n","data_frame = pd.DataFrame(np.concatenate((X_num,X_cat,X_bool),axis=1),columns=X_num_col+X_cat_col+X_bool_col)\n","predicted_class_name = ['HOSPITAL']\n","feature_column_names = data_frame.columns\n","print(len(feature_column_names))\n","del X_num, X_cat, X_bool\n","\n","X = data_frame[X_num_col+X_cat_col+X_bool_col].values\n","len(X)"],"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["59\n"]},{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KX4O8v-uJzOL","executionInfo":{"status":"ok","timestamp":1636558826953,"user_tz":-480,"elapsed":382,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"b94185dd-940b-4cff-9fa5-70eec8dca02b"},"source":["y_train_proba = rfc_m.predict_proba(X)[:, 1]\n","y_train_pred = rfc_m.predict(X)\n","proba = [rfc_m.predict_proba(X)[:, 1][0],lgb_m.predict_proba(X)[:, 1][0] , 0.50 , lr_m.predict_proba(X)[:, 1][0]]\n","proba\n","# xgb.predict_proba(X)[:, 1],"],"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.030976785678404527, 0.02467586136202861, 0.5, 0.015873995393474474]"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R1rz4WLPQADI","executionInfo":{"status":"ok","timestamp":1636558989956,"user_tz":-480,"elapsed":799,"user":{"displayName":"Antonia Devina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtJIkybhSn6ab95lUx8Zw2RzdUNDp17GkZ5A_MoQ=s64","userId":"07757924638012200285"}},"outputId":"c4f756f5-6497-4338-ea55-d7405b6e921a"},"source":["lr_schedule = optimizers.schedules.ExponentialDecay(initial_learning_rate=0.005,\n","    decay_steps=15,\n","    decay_rate=0.3)\n","optmz       = optimizers.Adam(learning_rate=lr_schedule)                                     \n","class_weight = {0:0.1, 1: 1.5}\n","modelname   = 'Covid-Hospitalization-Prediction-ML'                # Step 2\n","\n","                                                                                # Step 3\n","def createModel():\n","\n","    Lin   = Input(shape=(59), name = 'leftIn')\n","    Lx      = Dense(100,activation='relu')(Lin)\n","    Lx      = BatchNormalization(momentum=0.99, epsilon=0.001, center=True, scale=True,)(Lx)\n","    Lx      = Dense(100,activation='relu')(Lx)\n","    Lx      = BatchNormalization(momentum=0.99, epsilon=0.001, center=True, scale=True)(Lx)\n","    Lx       = Dense(50,activation='relu',kernel_regularizer=regularizers.l2(0.01))(Lx)\n","    Lx      = BatchNormalization(momentum=0.99, epsilon=0.001, center=True, scale=True)(Lx)\n","    Lx       = Dense(1,activation='relu',kernel_regularizer=regularizers.l2(0.15))(Lx)\n","    \n","    Rin     = Input(shape=(4), name = 'RightIn')\n","\n","    \n","    x       = concatenate([Lx,Rin], axis=-1)\n","    x       = Dense(15,activation='relu',kernel_regularizer=regularizers.l2(0.25))(x)\n","    x      = BatchNormalization(momentum=0.99, epsilon=0.001, center=True, scale=True)(x)\n","    x       = Dense(1,activation='sigmoid',kernel_regularizer=regularizers.l2(0.3))(x)\n","    \n","    model     = Model(inputs=[Lin,Rin],outputs=x)\n","    model.compile(loss=tf.keras.losses.BinaryCrossentropy(), \n","                  optimizer=optmz, \n","                  metrics=[tf.keras.metrics.BinaryAccuracy(),tf.keras.metrics.BinaryCrossentropy(),\n","                           tf.keras.metrics.FalsePositives(),tf.keras.metrics.FalseNegatives()])\n","     \n","    return model\n","\n","                                                                                # Step 4\n","modelGo     = createModel() # This is used for final testing\n","\n","folderpath      = DIR\n","filepath        = folderpath + modelname + \".hdf5\"\n","\n","modelGo.load_weights(filepath)\n","modelGo.compile(optimizer=optmz,\n","          loss=tf.keras.losses.BinaryCrossentropy(),\n","          metrics=tf.keras.metrics.BinaryCrossentropy())\n","\n","\n","predicts_train    = modelGo.predict([np.array(X).reshape(1,-1),np.array(proba).reshape(1,-1)])\n","labelname   = ['Not Hosp','Hospitalized']\n","\n","predout_train = predicts_train.copy()\n","print(predicts_train)\n","predout_train[predicts_train <= 0.5] = 0\n","predout_train[predicts_train > 0.5] = 1\n","\n","print(predout_train)\n"],"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.35281318]]\n","[[0.]]\n"]}]},{"cell_type":"code","metadata":{"id":"HPdEqr21gt5-"},"source":[""],"execution_count":null,"outputs":[]}]}